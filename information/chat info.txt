<template>
  <EasyDataTable
    ...
    @click-row="navigateToPDF"
  />
</template>

<script setup>
import { useRouter } from "vue-router";
import { ref } from "vue";
import type { Header, Item, ClickRowArgument, SortType } from "vue3-easy-data-table";

const router = useRouter();
const itemsSelected = ref([]);

const navigateToPDF = (item: ClickRowArgument) => {
  const id = item['ID'];
  router.push({ name: "pdf", params: { id } });
};
</script>



Ensuite, vous devez configurer les routes de vue-router pour qu'il sache comment naviguer vers la nouvelle page lorsque l'utilisateur clique sur le lien. Dans votre fichier router.ts, vous pouvez ajouter une nouvelle route pour le PDF:

import { createRouter, createWebHistory, RouteRecordRaw } from "vue-router";

import HomePage from "./pages/HomePage.vue";
import PdfPage from "./pages/PdfPage.vue";

const routes: RouteRecordRaw[] = [
  {
    path: "/",
    name: "home",
    component: HomePage,
  },
  {
    path: "/pdf/:id",
    name: "pdf",
    component: PdfPage,
  },
];

const router = createRouter({
  history: createWebHistory(),
  routes,
});

export default router;

Dans ce cas, la route pour le PDF est définie comme /pdf/:id, ce qui signifie que l'id de la ligne sera transmise en tant que paramètre nommé id.

Enfin, vous pouvez créer la page PDF qui charge le PDF correspondant en fonction de l'id transmis. Voici un exemple de ce que cela pourrait ressembler:


<template>
  <div class="pdf-page">
    <iframe :src="pdfUrl" width="100%" height="1000px"></iframe>
  </div>
</template>

<script>
export default {
  name: "PdfPage",
  computed: {
    pdfUrl() {
      const id = this.$route.params.id;
      return `https://drive.google.com/file/d/${id}/preview`;
    },
  },
};
</script>


Ici, nous utilisons la propriété params de this.$route pour récupérer l'id de la ligne à partir de l'URL, puis nous construisons l'URL du PDF à l'aide de cet id. Ensuite, nous utilisons cette URL pour charger le PDF dans un iframe.